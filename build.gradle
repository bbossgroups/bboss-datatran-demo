def profile = System.getProperty("profile") ?: "dev"
println(profile)
configure(allprojects) { project ->
	group = PROJ_GROUP
	version = PROJ_VERSION

	apply plugin: "java"
	apply plugin: "maven-publish"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "signing"
	apply plugin: "java-library"
	eclipse {
		jdt {
			//if you want to alter the java versions (by default they are configured with gradle java plugin settings):
			sourceCompatibility = SOURCE_COMPILER_LEVEL
			targetCompatibility = TARGET_COMPILER_LEVEL
			//javaRuntimeName = "../../org.eclipse.jdt.launching.JRE_CONTAINER"

		}
	}

	tasks.withType(JavaCompile) {

		sourceCompatibility = SOURCE_COMPILER_LEVEL
		targetCompatibility = TARGET_COMPILER_LEVEL
		options.encoding = 'UTF-8'
	}

	tasks.withType(Javadoc) {
//		
//		
		options.encoding = 'UTF-8'
		// disable the crazy super-strict doclint tool in Java 8
        // noinspection SpellCheckingInspection
		if (JavaVersion.current().isJava8Compatible()) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
    tasks.register('sourcesJar', Jar) {
        archiveClassifier = "sources"
        from sourceSets.main.allJava
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
	processResources {
		duplicatesStrategy = DuplicatesStrategy.INCLUDE
	}
    tasks.register('javaDocJar', Jar) {
        dependsOn javadoc
        archiveClassifier = "javadoc"
        from javadoc.destinationDir
    }
	artifacts {
		archives sourcesJar, javaDocJar
	}

	jar {
		manifest {
			attributes (
					'Implementation': archiveVersion,
					'Specification-Version': archiveVersion,
					'Implementation-Vendor': 'bbossgroups',
					'Implementation-ProductID': project.name,
					'Compile-Timestamp': new Date().format('yyyy-MM-dd HH:mm:ss'),
					'Compile-User': DEVELOPER_NAME
			)
		}
	}




	repositories {
		mavenLocal()
        maven {
            url "https://maven.aliyun.com/repository/public"
        }
		mavenCentral()


	}
	if(project.getProperty('skipTest').equals("true"))
	{
		compileTestJava.enabled=false
		processTestResources.enabled=false
		testClasses.enabled = false
		test.enabled = false
	}

	sourceSets {
		main {
			java {
				srcDir 'src/main/java'

			}
			if(profile == "dev") {
				resources {
					srcDir 'src/main/resources'
					srcDir 'src/main/java' exclude '**/*.java'
				}
			}
			else{
				resources {
					srcDir 'src/main/resources' exclude '**/*'
					srcDir 'src/main/java' exclude '**/*.java'
				}
			}


//			compileClasspath = configurations.api + configurations.runtime
		}
		test {
			java {
				srcDir 'src/test/java'

			}
			resources {
				srcDir 'src/test/resources'
				srcDir 'src/test/java'  exclude '**/*.java'
			}

		}

	}


	configurations {
		//屏蔽log4j
	    api.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        //兼容velocity 1.7版本，排除velocity2.5版本
//        api.exclude group: 'com.bbossgroups', module: 'bboss-velocity'

        apiResolvable {
            canBeResolved = true
            extendsFrom api
        }
        compileOnlyResolvable {
            canBeResolved = true
            extendsFrom compileOnly
        }

        runtimeOnlyResolvable {
            canBeResolved = true
            extendsFrom runtimeOnly
        }
    }

    tasks.register('copyJarFiles', Sync) {
        dependsOn 'jar'
        from configurations.apiResolvable {

        }
        from jar.outputs
        exclude { details -> details.file.name.startsWith('bboss-rt') }
        into 'build/dist/lib'

    }

    tasks.register('copyRTJarFiles', Copy) {
        dependsOn 'copyJarFiles'

        from configurations.apiResolvable {

        }
        include { details -> details.file.name.startsWith('bboss-rt') }
        into 'build/dist'
        rename("bboss-rt-${bboss_version}.jar", "${project.name}-${bboss_version}.jar")
    }
    tasks.register('copyToolFiles', Copy) {
        dependsOn 'copyRTJarFiles'

        from('runfiles')
                {
                    expand(
                            bboss_version: "${bboss_version}",
                            project: "${project.name}"
                    )

                }
        filteringCharset = 'UTF-8'
        into 'build/dist/'


    }
    tasks.register('copyResourcesfiles', Sync) {
        from fileTree(dir: 'src/main/resources')
        filteringCharset = 'UTF-8'
        into 'build/dist/resources'
    }
    tasks.register('releaseVersion',Zip) {
        dependsOn 'copyToolFiles','copyResourcesfiles'

        //appendix = 'wrapper'
        archiveClassifier = 'released'
        from 'build/dist/'

    }
    dependencies {
		testImplementation 'junit:junit:4.12'
        //兼容velocity 1.7版本，导入向后兼容包，需排除velocity2.5版本
//        api ( [group: 'com.bbossgroups.plugins', name: 'bboss-elasticsearch-rest-bc', version: "${bboss_es_version}", transitive: true])
		//采用log4j2记录日志
		api(
			[group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4j2_version}", transitive: false],
	        [group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4j2_version}", transitive: false],        
			[group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: "${log4j2_version}", transitive: true],
		)
		api(
				[group: 'com.bbossgroups.plugins', name: 'bboss-datatran-jdbc', version: "${bboss_es_version}", transitive: true],
				[group: 'com.bbossgroups.plugins', name: 'bboss-datatran-fileftp', version: "${bboss_es_version}", transitive: true],
                [group: 'com.bbossgroups.plugins', name: 'bboss-datatran-milvus', version: "${bboss_es_version}", transitive: true],
                [group: 'com.bbossgroups.plugins', name: 'bboss-datatran-rocketmq', version: "${bboss_es_version}", transitive: true],
                [group: 'com.bbossgroups.plugins', name: 'bboss-datatran-binlog', version: "${bboss_es_version}", transitive: true],
				[group: 'com.bbossgroups', name: 'bboss-schedule', version: "${bboss_version}", transitive: true],
                [group: 'com.bbossgroups.plugins', name: 'bboss-datatran-kafka2x', version: "${bboss_es_version}", transitive: true],
                [group: 'com.github.housepower', name: 'clickhouse-native-jdbc-shaded', version: "${clickhouse_verion}", transitive: true],

        )

        api 'com.opencsv:opencsv:5.12.0'
        
        api (
                [group: 'org.apache.kafka', name: 'kafka_2.12', version: kafka2x_12, transitive: true],
        ){
            exclude group: 'log4j', module: 'log4j'
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
            exclude group: 'org.slf4j', module: 'slf4j-reload4j'
            exclude group: 'org.apache.zookeeper', module: 'zookeeper'
        }

        api ([group: 'org.apache.kafka', name: 'kafka-tools', version: "${kafka2x}", transitive: true],){
            exclude group: 'log4j', module: 'log4j'
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
            exclude group: 'org.slf4j', module: 'slf4j-reload4j'
            exclude group: 'org.eclipse.jetty', module: 'jetty-server'

            exclude group: 'org.eclipse.jetty', module: 'jetty-servlets'

            exclude group: 'org.eclipse.jetty', module: 'jetty-servlet'
            exclude group: 'org.glassfish.jersey.containers', module: 'jersey-container-servlet'
        }

        api ([group: 'org.apache.kafka', name: 'kafka-clients', version: "${kafka2x}", transitive: true],){
            exclude group: 'log4j', module: 'log4j'
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
            exclude group: 'org.slf4j', module: 'slf4j-reload4j'
        }

        api ([group: 'org.apache.kafka', name: 'kafka-streams', version: "${kafka2x}", transitive: true],){
            exclude group: 'log4j', module: 'log4j'
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
            exclude group: 'org.slf4j', module: 'slf4j-reload4j'
        }
		api 'org.postgresql:postgresql:42.3.3'
//		api 'org.apache-extras.beanshell:bsh:2.0b6'
		api 'org.xerial:sqlite-jdbc:3.47.1.0'
		//mysql 8.0依赖
		//api group: 'mysql', name: 'mysql-connector-java', version: '8.0.33'
		//mysql 5.x依赖
//		api 'mysql:mysql-connector-java:8.0.33'
		api (
                [group: 'com.mysql', name: 'mysql-connector-j', version: "8.2.0", transitive: false],
				[group: 'com.bbossgroups', name: 'bboss-bootstrap-rt', version: "${bboss_version}", transitive: true]
		)
		api (
				fileTree(dir: 'lib', include: '*.jar')
		)

        api  (
                [group: 'org.apache.groovy', name: 'groovy', version: "${groovy_version}", transitive: true],

        ){
//            exclude group: 'org.apache.groovy', module: 'groovy-testng'
            exclude group: 'org.apache.groovy', module: 'groovy-test'
            exclude group: 'org.apache.groovy', module: 'groovy-test-junit5'

            exclude group: 'com.fasterxml.jackson.dataformat', module: 'jackson-dataformat-yaml'

            exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
            exclude group: 'com.github.javaparser', module: 'javaparser-core'

        }
	}


}



